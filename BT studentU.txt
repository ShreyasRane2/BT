// SPDX-License-Identifier: MIT
pragma solidity >= 0.7.0;

contract Student_management{

	struct Student{
		int stud_id;
		string Name;
		string Department;
	}

	Student[] Students;

	function add_stud(int stud_id, string memory Name, string memory Department) public{
		Student memory stud = Student(stud_id, Name, Department);
		Students.push(stud);
	}

	function getStudent(int stud_id) public view returns(string memory, string memory){
		for(uint i = 0; i < Students.length; i++){
			Student memory stud = Students[i];
			if(stud.stud_id == stud_id){
				return(stud.Name, stud.Department);
			}
		}
        return("Name Not Found", "Department Not Found");
	}

	//Fallback Function
	fallback() external payable{
		Students.push(Student(7, "XYZ", "Mechanical"));
	}
}






// 	Purpose: Provides a way to handle unexpected or unrecognized calls to the contract.
// Working:
// The fallback function is automatically triggered when the contract receives Ether without any function call, or when an invalid 
// function is called.
// In this contract, it adds a default student record with stud_id of 7, Name as "XYZ", and Department as "Mechanical" to the Students array.
}